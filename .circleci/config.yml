version: 2.1

# Custom Windows executor for VirtualBox build
executors:
  windows-executor:
    machine:
      image: windows-server-2022-gui:current
    resource_class: windows.large
    shell: powershell.exe

jobs:
  build-virtualbox-windows:
    executor: windows-executor
    
    steps:
      - checkout
      
      # Install Chocolatey for package management
      - run:
          name: Install Chocolatey
          command: |
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
      
      # Install Visual Studio Build Tools
      - run:
          name: Install Visual Studio Build Tools 2019
          command: |
            choco install visualstudio2019buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --add Microsoft.VisualStudio.Component.Windows10SDK.19041 --add Microsoft.VisualStudio.Component.VC.ATL --quiet" -y
          no_output_timeout: 30m
      
      # Install Windows SDK and WDK
      - run:
          name: Install Windows SDK 11 and WDK 11
          command: |
            # Download and install Windows SDK 11
            Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/?linkid=2166460" -OutFile "winsdksetup.exe"
            Start-Process -FilePath "winsdksetup.exe" -ArgumentList "/quiet" -Wait
            
            # Download and install WDK 11
            Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/?linkid=2166289" -OutFile "wdksetup.exe"
            Start-Process -FilePath "wdksetup.exe" -ArgumentList "/quiet" -Wait
          no_output_timeout: 20m
      
      # Install Python 2.7
      - run:
          name: Install Python 2.7
          command: |
            choco install python2 -y
            refreshenv
      
      # Install Qt5
      - run:
          name: Install Qt5
          command: |
            choco install qt5-default -y
          no_output_timeout: 15m
      
      # Install YASM
      - run:
          name: Install YASM
          command: |
            Invoke-WebRequest -Uri "https://www.tortall.net/projects/yasm/releases/yasm-1.3.0-win64.exe" -OutFile "C:\tools\yasm.exe"
            $env:PATH += ";C:\tools"
            [Environment]::SetEnvironmentVariable("PATH", $env:PATH, [EnvironmentVariableTarget]::Machine)
      
      # Install additional tools
      - run:
          name: Install Additional Tools
          command: |
            # Install Git (if not already present)
            choco install git -y
            
            # Install 7-Zip for archive handling
            choco install 7zip -y
            
            # Install curl
            choco install curl -y
      
      # Download and setup SDL
      - run:
          name: Setup SDL Development Libraries
          command: |
            $sdlUrl = "https://www.libsdl.org/release/SDL-devel-1.2.15-VC.zip"
            Invoke-WebRequest -Uri $sdlUrl -OutFile "SDL-devel.zip"
            Expand-Archive -Path "SDL-devel.zip" -DestinationPath "C:\tools\SDL"
      
      # Download and setup cURL development package
      - run:
          name: Setup cURL Development Package
          command: |
            $curlUrl = "https://curl.se/windows/dl-7.84.0_2/curl-7.84.0_2-win64-mingw.zip"
            Invoke-WebRequest -Uri $curlUrl -OutFile "curl-devel.zip"
            Expand-Archive -Path "curl-devel.zip" -DestinationPath "C:\tools\curl"
      
      # Setup environment and configure VirtualBox build
      - run:
          name: Configure VirtualBox Build Environment
          command: |
            # Setup environment variables
            $env:VBOX_INSTALL_PATH = "C:\VirtualBox"
            $env:PATH += ";C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin"
            $env:PATH += ";C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64"
            
            # Create LocalConfig.kmk for custom settings
            @"
            # Disable features that require additional setup for CI
            VBOX_WITH_WEBSERVICES=
            VBOX_WITH_VALIDATIONKIT=
            VBOX_WITHOUT_HARDENING=1
            
            # Paths for tools
            VBOX_PATH_SIGN_TOOLS=C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe
            VBOX_INF2CAT=C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\inf2cat.exe
            
            # Signing mode for testing
            VBOX_SIGNING_MODE=test
            "@ | Out-File -FilePath "LocalConfig.kmk" -Encoding ASCII
      
      # Run VirtualBox configure script
      - run:
          name: Run VirtualBox Configure Script
          command: |
            # Setup Visual Studio environment
            & "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvars64.bat"
            
            # Run configure script
            cscript configure.vbs --with-vc="C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC" --with-sdk10="C:\Program Files (x86)\Windows Kits\10" --with-qt5="C:\Qt\5.15.2\msvc2019_64" --with-libsdl="C:\tools\SDL\SDL-1.2.15" --with-libcurl="C:\tools\curl" --with-python="C:\Python27"
          no_output_timeout: 10m
      
      # Setup test certificate for code signing
      - run:
          name: Setup Test Certificate for Code Signing
          command: |
            # Create test certificate
            & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\makecert.exe" -r -pe -ss my -eku 1.3.6.1.5.5.7.3.3 -n "CN=VirtualBoxTestCert" vboxtest.cer
            
            # Install certificate
            & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\certmgr.exe" -add vboxtest.cer -s -r localMachine root
            & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\certmgr.exe" -add vboxtest.cer -s -r localMachine trustedpublisher
      
      # Build VirtualBox
      - run:
          name: Build VirtualBox
          command: |
            # Enter build environment
            & ".\env.bat"
            
            # Build release version
            kmk
          no_output_timeout: 60m
      
      # Create installation package
      - run:
          name: Create Installation Package
          command: |
            # Enter build environment
            & ".\env.bat"
            
            # Create MSI package
            kmk packing
          no_output_timeout: 30m
      
      # Create zip archive of build artifacts
      - run:
          name: Create Build Artifacts Archive
          command: |
            # Determine architecture
            $arch = if ([Environment]::Is64BitOperatingSystem) { "amd64" } else { "x86" }
            $binPath = "out\win.$arch\release\bin"
            
            # Create artifacts directory
            New-Item -ItemType Directory -Force -Path "artifacts"
            
            # Copy binaries to artifacts
            Copy-Item -Path "$binPath\*" -Destination "artifacts\" -Recurse -Force
            
            # Create zip file
            $zipName = "VirtualBox-Windows-$arch-$(Get-Date -Format 'yyyyMMdd-HHmmss').zip"
            Compress-Archive -Path "artifacts\*" -DestinationPath $zipName
            
            # Also copy MSI if it exists
            $msiPath = "out\win.$arch\release\bin\VirtualBox-*.msi"
            if (Test-Path $msiPath) {
                Copy-Item -Path $msiPath -Destination "." -Force
            }
            
            Write-Host "Build artifacts created: $zipName"
      
      # Store artifacts
      - store_artifacts:
          path: VirtualBox-Windows-*.zip
          destination: virtualbox-build
      
      - store_artifacts:
          path: VirtualBox-*.msi
          destination: virtualbox-installer
      
      # Store test results if any
      - store_test_results:
          path: test-results

  # Optional: Build for both x86 and x64 architectures
  build-virtualbox-x86:
    executor: windows-executor
    
    steps:
      - checkout
      
      # Similar steps as above but with --target-arch=x86 parameter
      - run:
          name: Configure for x86 Build
          command: |
            # All the same setup steps as above...
            # But run configure with x86 target
            cscript configure.vbs --target-arch=x86 --with-vc="C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC" --with-sdk10="C:\Program Files (x86)\Windows Kits\10"
      
      # Build steps for x86...
      - run:
          name: Build VirtualBox x86
          command: |
            & ".\env.bat"
            kmk
          no_output_timeout: 60m

workflows:
  version: 2
  build-and-test:
    jobs:
      - build-virtualbox-windows:
          filters:
            branches:
              only:
                - main
                - develop
                - /^release\/.*/
      
      # Optionally build x86 version in parallel
      # - build-virtualbox-x86:
      #     filters:
      #       branches:
      #         only:
      #           - main
      #           - develop

  # Scheduled builds (e.g., nightly)
  scheduled-build:
    triggers:
      - schedule:
          cron: "0 2 * * *"  # Daily at 2 AM UTC
          filters:
            branches:
              only:
                - main
    jobs:
      - build-virtualbox-windows
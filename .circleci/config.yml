version: 2.1

# Define reusable executors, commands, and jobs
executors:
  windows-sdk-executor:
    machine:
      image: windows-server-2019-vs2019 # Or your preferred Windows image with VS 2019
    resource_class: windows.xlarge # Or appropriate resource class
    shell: bash.exe # Or cmd.exe if preferred for most commands

jobs:
  build-virtualbox-windows:
    executor: windows-sdk-executor
    environment:
      # Define paths to tools. These might need adjustment based on your setup.
      # It's often better to let configure.vbs auto-detect, but you can override.
      VBOX_DEV_TOOLS_PATH: "C:\\VBoxDevTools" # Example base path for downloaded tools
      PYTHON_PATH: "C:\\Python27" # Python 2.7.x is required [3]
      YASM_PATH: "%VBOX_DEV_TOOLS_PATH%\\yasm" # Yasm 1.3+ [3]
      QT_PATH: "C:\\Qt\\5.15.2\\msvc2019_64" # Qt 5.6+ built with VS2019 [3]
      CURL_PATH_X64: "%VBOX_DEV_TOOLS_PATH%\\curl-x64" # cURL 64-bit dev package [3]
      CURL_PATH_X86: "%VBOX_DEV_TOOLS_PATH%\\curl-x86" # cURL 32-bit dev package [3]
      OPENSSL_PATH_X64: "%VBOX_DEV_TOOLS_PATH%\\openssl-x64" # OpenSSL 1.1.1+ 64-bit dev [3]
      OPENSSL_PATH_X86: "%VBOX_DEV_TOOLS_PATH%\\openssl-x86" # OpenSSL 1.1.1+ 32-bit dev [3]
      WIX_PATH: "C:\\Program Files (x86)\\WiX Toolset v3.11" # WiX toolset for MSI [3]
      # Paths to VS, SDK, WDK are often auto-detected by configure.vbs if installed with VS Installer.
      # If not, you'd specify --with-vc, --with-sdk10, --with-ddk options.
      # VS2019_VC_PATH: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC" (Example)
      # WIN_SDK10_PATH: "C:\\Program Files (x86)\\Windows Kits\\10" (Example)
      # WIN_WDK_PATH: "C:\\Program Files (x86)\\Windows Kits\\10\\WDK" (Example for WDK 7.1, Trunk needs WDK 11)

    steps:
      - checkout # Checks out your VirtualBox source code

      - run:
          name: Set up PATH for build tools
          command: |
            echo "export PATH=$PYTHON_PATH:$YASM_PATH:$PATH" >> $BASH_ENV
            # Ensure an environment variable for VS if needed, e.g. for vcvarsall.bat
            # Or rely on configure.vbs finding it.

      - run:
          name: Install Prerequisites (Conceptual)
          # This step is highly dependent on your CI image and preferred installation methods.
          # You might use Chocolatey or download installers/zips.
          # Ensure tools are on PATH or their locations are passed to configure.vbs
          command: |
            echo "Installing prerequisites..."
            # Example using Chocolatey (ensure Chocolatey is available on the runner)
            # choco install python2 -y --installargs "ADDLOCAL=ALL"
            # choco install yasm -y
            # choco install Wix -y
            # Qt installation is more complex, often manual or using aqtinstall.
            # aqt install-qt windows desktop 5.15.2 win64_msvc2019_64 -O C:\Qt
            # For cURL, OpenSSL, SDL, download the development libraries (headers and .lib files)
            # and extract them to known locations (e.g., %VBOX_DEV_TOOLS_PATH%\curl-x64)
            # mkdir -p %VBOX_DEV_TOOLS_PATH%
            # Example: Download and extract yasm to %YASM_PATH%
            # Example: Download and extract cURL (win64-mingw with libcurl-devel) to %CURL_PATH_X64%

            # Verify Visual Studio 2019, Windows SDK 11, WDK 11 are installed.
            # These are typically installed via Visual Studio Installer.

            echo "Make sure Yasm is in PATH: $YASM_PATH"
            ls "$YASM_PATH/yasm.exe" # Check if yasm exists

      - run:
          name: Configure VirtualBox Build
          # Paths for --with-qt5, --with-libcurl, --with-openssl etc. must be correct.
          # The configure script will create AutoConfig.kmk and env.bat [3]
          command: |
            cscript configure.vbs \
              --with-qt5="%QT_PATH%" \
              --with-libcurl="%CURL_PATH_X64%" \
              --with-libcurl32="%CURL_PATH_X86%" \
              --with-openssl="%OPENSSL_PATH_X64%" \
              --with-openssl32="%OPENSSL_PATH_X86%"
            # Add --with-vc, --with-sdk10, --with-ddk if auto-detection fails or is not desired.

      - run:
          name: Create LocalConfig.kmk
          # This file customizes the build [3]
          command: |
            echo "VBOX_WIX_PATH := %WIX_PATH%" > LocalConfig.kmk
            echo "VBOX_PATH_NSIS := C:\\Program Files (x86)\\NSIS" >> LocalConfig.kmk # If Guest Additions installer needed via NSIS
            echo "VBOX_SIGNING_MODE := test" >> LocalConfig.kmk # For CI, test signing is feasible [3]
            # For actual code signing, you'd need a real certificate and secure handling:
            # echo "VBOX_SIGNING_MODE := release" >> LocalConfig.kmk
            # echo "VBOX_CERTIFICATE_SUBJECT_NAME := YourCertSubjectName" >> LocalConfig.kmk
            # echo "VBOX_CERTIFICATE_FINGERPRINT := YourCertFingerprint" >> LocalConfig.kmk
            # echo "VBOX_TSA_URL := http://timestamp.digicert.com" >> LocalConfig.kmk
            # The following can be useful for CI to speed up or simplify:
            # echo "VBOX_WITH_VALIDATIONKIT :=" >> LocalConfig.kmk
            # echo "VBOX_WITH_WEBSERVICES :=" >> LocalConfig.kmk
            # echo "VBOX_WITHOUT_HARDENING := 1" >> LocalConfig.kmk # Use with caution, for testing only. Drivers still need signing.

      - run:
          name: Build VirtualBox
          # Source env.bat and run kmk [3]
          # This builds the main application. Output goes to out\win.amd64\release\bin (for 64-bit)
          command: |
            cmd.exe /C "env.bat && kmk"

      - run:
          name: Build 32-bit Guest Additions (for 64-bit MSI packaging)
          # Required if building a 64-bit package that includes Guest Additions [3]
          command: |
            cmd.exe /C "env.bat && kmk VBOX_ONLY_ADDITIONS=1 KBUILD_TARGET_ARCH=x86"

      - run:
          name: Package VirtualBox (Create MSI)
          # This creates the .msi installer [3]
          command: |
            cmd.exe /C "env.bat && kmk packing"

      - store_artifacts:
          path: out/win.amd64/release/bin # Path for 64-bit build
          destination: virtualbox-build

      - store_artifacts: # Store the MSI specifically
          path: out/win.amd64/release/bin/VirtualBox*.msi
          destination: virtualbox-msi

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build-virtualbox-windows